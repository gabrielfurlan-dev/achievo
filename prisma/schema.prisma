generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("NEXT_PUBLIC_SUPABASE_URL")
}

model User {
    id                String   @id @default(uuid())
    email             String   @unique
    name              String
    imageURL          String
    username          String?  @unique
    description       String?
    enable            Boolean  @default(true)
    alreadyRegistered Boolean  @default(false)
    registeredDate    DateTime @default(now())

    reports           Report[]
    readNotifications ReadNotifications[]

    following Follow[] @relation("UserFollowing")
    followers Follow[] @relation("UserFollowers")
}

model Follow {
    id              Int    @id @default(autoincrement())
    userId          String
    followingUserId String

    userFollowing User @relation("UserFollowing", fields: [userId], references: [id])
    userFollowed  User @relation("UserFollowers", fields: [followingUserId], references: [id])

    @@unique([userId, followingUserId])
}

model Notification {
    id                Int                 @id @default(autoincrement())
    createdDate       DateTime            @default(now())
    message           String
    title             String
    wikiURL           String
    readNotifications ReadNotifications[]
}

model ReadNotifications {
    id     Int    @id @default(autoincrement())
    User   User   @relation(fields: [userId], references: [id])
    userId String

    notification   Notification @relation(fields: [notificationId], references: [id])
    notificationId Int
}

model Report {
    id          Int      @id @default(autoincrement())
    createdDate DateTime @default(now())
    updatedDate DateTime @default(now()) @updatedAt
    enable      Boolean  @default(true)

    progressGoals ProgressGoal[]

    user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String?
}

model ProgressGoal {
    id          Int      @id @default(autoincrement())
    updatedDate DateTime @updatedAt
    title       String
    index       Int
    value       Decimal
    total       Decimal

    report   Report?    @relation(fields: [reportId], references: [id], onDelete: Cascade)
    reportId Int?
    GoalTags GoalTags[]
}

model GoalTags {
    progressGoal   ProgressGoal @relation(fields: [progressGoalId], references: [id])
    progressGoalId Int

    tag   Tag @relation(fields: [tagId], references: [id])
    tagId Int

    @@unique([progressGoalId, tagId])
}

model Tag {
    id    Int    @id @default(autoincrement())
    title String
    icon  String

    color        Color  @relation(fields: [colorHexCode], references: [hexCode])
    colorHexCode String

    userId   String
    GoalTags GoalTags[]
}

model Color {
    name    String
    hexCode String @id @unique
    tag     Tag[]
}
